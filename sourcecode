#ifndef INTBINARYTREE_H
#define INTBINARYTREE_H
#define nullptr 0
class IntBinaryTree
{
private:
   struct TreeNode
   {
      int value;         // The value in the node
      TreeNode *left;    // Pointer to left child node
      TreeNode *right;   // Pointer to right child node
   };

   TreeNode *root;       // Pointer to the root node

   // Private member functions
   void insert(TreeNode *&, TreeNode *&);
   void destroySubTree(TreeNode *);
   void deleteNode(int, TreeNode *&);
   void makeDeletion(TreeNode *&);
   void displayInOrder(TreeNode *) const;
   void displayPreOrder(TreeNode *) const;
   void displayPostOrder(TreeNode *) const;

public:
   // Constructor
   IntBinaryTree()
      { root = nullptr; }

   // Destructor
   ~IntBinaryTree()
      { destroySubTree(root); }

   // Binary tree operations
   void insertNode(int);
   bool searchNode(int);
   void remove(int);

   void displayInOrder() const
      {  displayInOrder(root); }

   void displayPreOrder() const
      {  displayPreOrder(root); }

   void displayPostOrder() const
      {  displayPostOrder(root); }
};
#endif
#include <iostream>
#include "IntBinaryTree.h"
using namespace std;

void IntBinaryTree::insert(TreeNode *&nodePtr, TreeNode *&newNode)
{
   if (nodePtr == nullptr)
      nodePtr = newNode;                  // Insert the node.
   else if (newNode->value < nodePtr->value)
      insert(nodePtr->left, newNode);     // Search the left branch
   else
      insert(nodePtr->right, newNode);    // Search the right branch
}

void IntBinaryTree::insertNode(int num)
{
   TreeNode *newNode = nullptr;	// Pointer to a new node.

   // Create a new node and store num in it.
   newNode = new TreeNode;
   newNode->value = num;
   newNode->left = newNode->right = nullptr;

   // Insert the node.
   insert(root, newNode);
}

void IntBinaryTree::destroySubTree(TreeNode *nodePtr)
{
   if (nodePtr)
   {
      if (nodePtr->left)
         destroySubTree(nodePtr->left);
      if (nodePtr->right)
         destroySubTree(nodePtr->right);
      delete nodePtr;
   }
}

bool IntBinaryTree::searchNode(int num)
{
   TreeNode *nodePtr = root;

   while (nodePtr)
   {
      if (nodePtr->value == num)
         return true;
      else if (num < nodePtr->value)
         nodePtr = nodePtr->left;
      else
         nodePtr = nodePtr->right;
   }
   return false;
}

//**********************************************
// remove calls deleteNode to delete the       *
// node whose value member is the same as num. *
//**********************************************

void IntBinaryTree::remove(int num)
{
   deleteNode(num, root);
}


//********************************************
// deleteNode deletes the node whose value   *
// member is the same as num.                *
//********************************************

void IntBinaryTree::deleteNode(int num, TreeNode *&nodePtr)
{
   if (num < nodePtr->value)
      deleteNode(num, nodePtr->left);
   else if (num > nodePtr->value)
      deleteNode(num, nodePtr->right);
   else
      makeDeletion(nodePtr);
}


//***********************************************************
// makeDeletion takes a reference to a pointer to the node  *
// that is to be deleted. The node is removed and the       *
// branches of the tree below the node are reattached.      *
//***********************************************************

void IntBinaryTree::makeDeletion(TreeNode *&nodePtr)
{
   // Define a temporary pointer to use in reattaching
   // the left subtree.
   TreeNode *tempNodePtr = nullptr;

   if (nodePtr == nullptr)
      cout << "Cannot delete empty node.\n";
   else if (nodePtr->right == nullptr)
   {
      tempNodePtr = nodePtr;
      nodePtr = nodePtr->left;   // Reattach the left child
      delete tempNodePtr;
   }
   else if (nodePtr->left == nullptr)
   {
      tempNodePtr = nodePtr;
      nodePtr = nodePtr->right;  // Reattach the right child
      delete tempNodePtr;
   }
   // If the node has two children.
   else
   {
      // Move one node the right.
      tempNodePtr = nodePtr->right;
      // Go to the end left node.
      while (tempNodePtr->left)
         tempNodePtr = tempNodePtr->left;
      // Reattach the left subtree.
      tempNodePtr->left = nodePtr->left;
      tempNodePtr = nodePtr;
      // Reattach the right subtree.
      nodePtr = nodePtr->right;
      delete tempNodePtr;
   }
}

//****************************************************************
// The displayInOrder member function displays the values        *
// in the subtree pointed to by nodePtr, via inorder traversal.  *
//****************************************************************

void IntBinaryTree::displayInOrder(TreeNode *nodePtr) const
{
   if (nodePtr)
   {
      displayInOrder(nodePtr->left);
      cout << nodePtr->value << endl;
      displayInOrder(nodePtr->right);
   }
}

//****************************************************************
// The displayPreOrder member function displays the values       *
// in the subtree pointed to by nodePtr, via preorder traversal. *
//****************************************************************

void IntBinaryTree::displayPreOrder(TreeNode *nodePtr) const
{
   if (nodePtr)
   {
      cout << nodePtr->value << endl;
      displayPreOrder(nodePtr->left);
      displayPreOrder(nodePtr->right);
   }
}

//****************************************************************
// The displayPostOrder member function displays the values      *
// in the subtree pointed to by nodePtr, via postorder traversal.*
//****************************************************************

void IntBinaryTree::displayPostOrder(TreeNode *nodePtr) const
{
   if (nodePtr)
   {
      displayPostOrder(nodePtr->left);
      displayPostOrder(nodePtr->right);
      cout << nodePtr->value << endl;
   }
}




#include <iostream>
#include "IntBinaryTree.h"
using namespace std;

int main()
{
   IntBinaryTree tree;

   cout << "Inserting initial nodes. ";
   cout << " " <<endl;
   tree.insertNode(90);
   tree.insertNode(50);
   tree.insertNode(20);
   tree.insertNode(75);
   tree.insertNode(25);
   tree.insertNode(5);
   tree.insertNode(66);
   tree.insertNode(80);
   tree.insertNode(150);
   tree.insertNode(95);
   tree.insertNode(92);
   tree.insertNode(111);
   tree.insertNode(175);
   tree.insertNode(166);
   tree.insertNode(200);
cout << "Done.\n" << endl;
cout << " " <<endl;
cout << " " <<endl;
int ch=0;
while (ch!=5)
{
cout << "Please select from the binary tree menu "<<endl;
cout << "1. insert a node "<<endl;
cout << "2. delete a node "<<endl;
cout << "3. displaying the tree "<<endl;
cout << "4. searching for a node "<<endl;
cout << "5. exit "<<endl;
cin>>ch;

if (ch==1)
{
    int n=0;
    cout << "Please enter the number you'd like to add: "<<endl;
    cin>>n;
    tree.insertNode(n);
}

if (ch==2)
{
    int j=0;
    cout << "Please enter the node to remove: "<<endl;
    cin>>j;
    tree.remove(j);

}
if (ch==3)
{
    int ch2=0;
    cout << "Choose how you want to display the list: "<<endl;
    cout << "1.In order"<<endl;
    cout << "2.Pre order"<<endl;
    cout << "3.Post order"<<endl;
    cin>>ch2;

    if(ch2==1)
    {
   cout << "Inorder traversal:\n";
   tree.displayInOrder();
    }

     if(ch2==2)
    {
   cout << "\nPreorder traversal:\n";
   tree.displayPreOrder();
    }

     if(ch2==3)
    {
   cout << "\nPostorder traversal:\n";
   tree.displayPostOrder();
    }
}

if (ch==4)
{
int x=0;
cout << "Choose what element you want to search for: "<<endl;
cin>>x;
if (tree.searchNode(x))
cout << x <<" is found in the tree.\n";
else
 cout << x<<" was not found in the tree.\n";
}

if (ch==5)
{

}

}


   return 0;
}
